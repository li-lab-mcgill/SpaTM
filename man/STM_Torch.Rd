% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/STM.R
\name{STM_Torch}
\alias{STM_Torch}
\title{Train a Spatial Topic Model (SpaTM-S) using Torch}
\usage{
STM_Torch(
  spe,
  labels,
  num_threads = 1L,
  maxiter = 100L,
  verbal = TRUE,
  zero_gamma = TRUE,
  rand_gamma = FALSE,
  thresh = 1e-05,
  lr = 1e-04,
  mlp,
  mlp_layers,
  mlp_epoch = 1000,
  spe_val,
  device = torch_device("cpu"),
  balanced_class = TRUE,
  dummy_topic = FALSE
)
}
\arguments{
\item{spe}{A `SpatialTopicExperiment` object.}

\item{labels}{A vector of spatial (or phenotype) labels for the cells.}

\item{num_threads}{Number of threads to use for parallel computation (default is 1).}

\item{maxiter}{Maximum number of iterations for model training (default is 100).}

\item{verbal}{Logical indicating whether to display progress messages (default is `TRUE`).}

\item{zero_gamma}{Logical indicating whether to initialize the gamma parameters to zero (default is `TRUE`).}

\item{rand_gamma}{Logical indicating whether to randomize the gamma parameters (default is `FALSE`).}

\item{thresh}{Convergence threshold for stopping the model training (default is 0.00001).}

\item{lr}{Learning rate for optimization (default is 0.0001).}

\item{mlp}{A model definition for the multi-layer perceptron (MLP).}

\item{mlp_layers}{A vector specifying the number of units in each layer of the MLP.}

\item{mlp_epoch}{The number of epochs for training the MLP.}

\item{spe_val}{A validation set used for monitoring overfitting in SpaTM-S.}

\item{device}{The device for training (e.g., "cpu" or "cuda") when using SpaTM-S. If `NULL`, the default device is used. Note that we are still working on reliably GPU enabling the code.}

\item{balanced_class}{Logical indicating whether to balance the class distribution during model training (default is `TRUE`).}

\item{dummy_topic}{Logical indicating whether to add a dummy topic for regularization (default is `FALSE`).}
}
\value{
The trained MLP model (of class `nn_module`).
}
\description{
This function trains a SpaTM-S using a multi-layer perceptron (MLP) model. Note that this function should only be used by the \link{STM} wrapper function for ease-of-use.
}
\examples{
# Example: Running Torch-STM with MLP model.
spe_result <- STM_Torch(spe = spe_object, labels = labels, mlp = my_mlp_model, mlp_layers = c(64, 32), spe_val = spe_validation)

}
\seealso{
\link{STM}
}
